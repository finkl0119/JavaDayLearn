* 21일차 복습

1. 클래스 
	=> 객체지향 클래스 (붕어빵 틀) 객체(붕어빵)
 				도면			자동차
	클래스 => 속성(기본형 int double boolean char 참조형 class  기능 (메소드,함수 4가지))
	생성자() => 안만들어도 자동으로 디폴트로 들어감, 만들면 디폴트 X 
2. has 관계
	class A{B b;} class B{} => 부품 조립 관계 엔진과 자동차, 연필과 필통

3. 클래스 배열
	A a[] = new A[10]; => 속에는 객체는 없고 건물만 세워 짐
	for(int i=0; i<a.length; i++){
		a[i] = new A(); 
		=> 건물 안에 있는 곳에 객체를 채워주는 과정 객체가 생성 되려면 생성자가 불려야 됨.
	}	
4. 생성자 
	class A{
		A(){ => 생성자, 인자를 받을 수 있으나 리턴값을 없다. 인자의 제한은 없다.
		}
	}
	class A{
		A(int a){ 
		}
	}
5. 상속
	class A{} class B{} extends A 
	=> 부모의 모든걸 자식이 내 마음대로 쓸 수있는 것
		상속때문에 부모 자식 크기를 비교하면 자식이 크거나 같다.
6. 접근 관계
	public(누구나) protected(상속받은 자식만) default(같은 패키지에서) private(나만)
	=> 데이터 -> private 기능(함수, 메소드) -> public 
7. is 관계
	상속 관계 자식이 부모에 모든 것을 받아서 사용하는 것
8. 	오버로딩 오버라이딩
	오버로딩 => 함수, 생성자 똑같은 이름으로 만드는데 인자에 차이를 줘서 똑같은 이름을 사용하게 하는게
	차이 : 인자의 개수가 다르거나 아니면 자료형이 달라야 실행이 된다.
	오버라이딩 => 부모로 부터 상속을 받은 함수를 자식 클래스 에 재정의 하는 것
9. 추상화
	abstact class / interface => 추상화 메소드를 가지고 있기 때문에 
	자식이 오버라이딩을 필수 진행을 해야합니다.
	interface 같은 경우에는 class가 상속 받을 때 impliments로 명령을 사용합니다.
	추상화 정도 : class < abstact class < interface
	abstact class / interface 객체를 생성할 수 없다. 
10. 클래스 정리
	클래스 배열 오버라이딩을 통한 형변환 부모를 기준으로 자식을 취합하거나 
	배열 최적화 소스를 줄이는데 중요합니다.
11. 컬렉션
	Set ArrayList HashMap Stack LinkedList
12. 제네릭
	class MyClass<T> => <T> 이 부분으로 런타임시에 자료형이 선택이 됩니다.
	ArrayList<A> 
13. 파일 입출력
	FileReader FileWrite File
	
	
	